security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    role_hierarchy:
        ROLE_ADMIN: ['ROLE_ADMIN']
        ROLE_USER: ['ROLE_USER']

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user:
            entity:
                class: Proyecto\Domain\Model\User\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: user
            custom_authenticator: Proyecto\Infrastructure\Form\Type\Security\Login

            form_login:
                login_path: login-view
                check_path: login-view
                username_parameter: email
                password_parameter: password
                enable_csrf: true

            logout:
                path: logout-view

            remember_me:
                secret: '%kernel.secret%'


    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
